//pass paramter from one job to other job and storing that parameter inside var.yml file

Job1
---------
properties([parameters([extendedChoice(defaultValue: '', description: '', multiSelectDelimiter: ',', name: 'Environment', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_CHECKBOX', value: 'Dev,QA,Staging,Prod', visibleItemCount: 4)])])

pipeline {
    agent any
    options { skipDefaultCheckout() }
    
    stages {
        stage('Input') {
            steps {
                build job: 'Job2', parameters: [string(name: 'Output', value: "${params.Environment}")]
            }
        }
    }
}


Job2
---------
pipeline {
    agent any
    parameters {
        string(defaultValue: '', description: 'enter env value', name: 'Output', trim: true)
    }
    stages {
        stage('Output') {
            steps {
                script{
                    echo "${params.Output}"
                   
                }
            }
        }
        stage('Output to var.yml file') {
            steps {
                script {
                    def str2 = "${params.Output}".split(",");
                    def data = "env:"
                    
                    if(str2.contains('')){
                        str2 = 'Dev'  //setting Output variable default value
                        data = data+ "\n - {env_name: \"$str2\", enabled: true}"
                    } else {
                        for (i in str2) {
                            data = data+ "\n - {env_name: \"$i\", enabled: true}"
                        }  
                    }
                    
                    data = data+'\n'
                    data = data+"\nkube_deployment_file: \"{{env.env_name}}.kube.deployment.yml\""
                    data = data+"\nkube_service_file: \"{{env.env_name}}.kube.service.yml\""
                    data = data+'\n'
                    writeFile(file: 'vars.yml', text: data)
                    sh "cat vars.yml"
              }
            }
        }
        /*stage('Deploy to cluster'){
            steps
            {  
                sshPublisher(publishers: [sshPublisherDesc(configName: 'Ansible-ubuntu', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: """ ansible-playbook --extra-vars ' Output1="${params.Output1}" Output2="${params.Output2}" ' /home/ubuntu/repo/test-playbook.yml """, execTimeout: 120000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
            }
        }*/
    }
}
